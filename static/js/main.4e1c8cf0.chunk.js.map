{"version":3,"sources":["components/AppHeader.js","components/CaseMetrics.js","components/MetricsTable.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppHeader","classes","className","AppBar","position","Toolbar","Typography","variant","padding","width","height","bullet","display","margin","transform","fontSize","fontWeight","pos","marginLeft","marginTop","marginBottom","MetricsCard","this","props","Card","CardContent","component","text","val","Component","withStyles","StyledTableCell","head","backgroundColor","palette","common","black","color","white","body","TableCell","StyledTableRow","action","hover","TableRow","table","minWidth","DataTableComponent","TableContainer","Paper","Table","aria-label","TableHead","align","TableBody","filter","row","state","map","key","scope","confirmed","active","recovered","deaths","testspermillion","numicubeds","withTheme","App","mergeData","i","j","undefined","data","testingData","length","console","log","obj","push","setState","mergedData","getTestingData","self","axios","get","then","response","tData","states_tested_data","updatedon","catch","error","finally","getPatientData","fetch","json","statewise","id","Grid","container","item","md","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+UAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,yB,4BCtBJR,EAAYC,YAAW,CAEzBE,KAAM,CACEc,QAAQ,OACRC,MAAO,QACPC,OAAQ,SAElBC,OAAQ,CACNC,QAAS,eACTC,OAAQ,MACRC,UAAW,cAEbf,MAAO,CACLgB,SAAU,GACVC,WAAW,QAEXC,IAAK,CACDC,WAAY,GACZrB,YAAa,GACbsB,UAAU,GACVC,aAAc,MAGhBC,E,uKACM,IACDpB,EAAWqB,KAAKC,MAAhBtB,QACP,OACE,kBAACuB,EAAA,EAAD,CAAQtB,UAAWD,EAAQP,MACzB,kBAAC+B,EAAA,EAAD,KACE,kBAACnB,EAAA,EAAD,CAAYC,QAAQ,KAAKmB,UAAU,MAChCJ,KAAKC,MAAMI,MAEd,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,KAAKmB,UAAU,MAChCJ,KAAKC,MAAMK,W,GAVEC,aAiBXC,cAAWvC,EAAXuC,CAAuBT,G,uECnChCU,EAAkBD,aAAW,SAACrC,GAAD,MAAY,CAC7CuC,KAAM,CACJC,gBAAiBxC,EAAMyC,QAAQC,OAAOC,MACtCC,MAAO5C,EAAMyC,QAAQC,OAAOG,OAE9BC,KAAM,CACJxB,SAAU,OANUe,CAQpBU,KAEEC,EAAiBX,aAAW,SAACrC,GAAD,MAAY,CAC5CC,KAAM,CACJ,qBAAsB,CACpBuC,gBAAiBxC,EAAMyC,QAAQQ,OAAOC,WAHrBb,CAMnBc,KAEErD,EAAYC,YAAW,CAC3BqD,MAAO,CACLC,SAAU,OAGRC,E,kQAUQ,IACE9C,EAAYqB,KAAKC,MAAjBtB,QACR,OACI,kBAAC+C,EAAA,EAAD,CAAgBtB,UAAWuB,KACzB,kBAACC,EAAA,EAAD,CAAOhD,UAAWD,EAAQ4C,MAAOM,aAAW,oBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAD,KACE,kBAACb,EAAD,CAAiBsB,MAAM,UAAvB,cACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,aACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,UACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,aACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,YACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,oBACA,kBAACtB,EAAD,CAAiBsB,MAAM,UAAvB,oBAGE,kBAACC,EAAA,EAAD,KACGhC,KAAKC,MAAMK,IACP2B,QAAO,SAAAC,GAAG,MAAkB,qBAAdA,EAAIC,OACC,UAAbD,EAAIC,SACVC,KAAI,SAACF,GAAD,OACX,kBAACf,EAAD,CAAgBkB,IACZH,EAAIC,OAER,kBAAC1B,EAAD,CAAiBL,UAAU,KAAKkC,MAAM,MAAMP,MAAM,UACzCG,EAAIC,OAEb,kBAAC1B,EAAD,CAAiBsB,MAAM,UAAUG,EAAIK,WACrC,kBAAC9B,EAAD,CAAiBsB,MAAM,UAAUG,EAAIM,QACrC,kBAAC/B,EAAD,CAAiBsB,MAAM,UAAUG,EAAIO,WACvC,kBAAChC,EAAD,CAAiBsB,MAAM,UAAUG,EAAIQ,QACrC,kBAACjC,EAAD,CAAiBsB,MAAM,UAAUG,EAAIS,iBACrC,kBAAClC,EAAD,CAAiBsB,MAAM,UAAUG,EAAIU,uB,GA1CxBrC,aAoDlBC,cAAWvC,EAAW,CAAE4E,WAAW,GAAnCrC,CAA2CiB,G,iBCoE3CqB,E,kDAhJb,aAAe,IAAD,8BACZ,gBAYFC,UAAY,WACV,IAAIA,EAAY,GACZC,EAAI,EACJC,EAAI,EAGR,QAAwBC,IAApB,EAAKf,MAAMgB,WAAiDD,IAA3B,EAAKf,MAAMiB,YAC9C,IAAKJ,EAAI,EAAGA,EAAI,EAAKb,MAAMgB,KAAKE,OAAQL,IAEtC,IADAM,QAAQC,IAAI,iBAAkBP,GACzBC,EAAI,EAAGA,EAAI,EAAKd,MAAMiB,YAAYC,OAAQJ,IAE7C,GADAK,QAAQC,IAAI,qBAAsBN,GAC9B,EAAKd,MAAMgB,KAAKH,GAAGb,QAAU,EAAKA,MAAMiB,YAAYH,GAAGd,MAAO,CAChE,IAAIqB,EAAM,GACVF,QAAQC,IAAI,QACZC,EAAIrB,MAAQ,EAAKA,MAAMgB,KAAKH,GAAGb,MAC/BqB,EAAIjB,UAAY,EAAKJ,MAAMgB,KAAKH,GAAGT,UACnCiB,EAAIhB,OAAS,EAAKL,MAAMgB,KAAKH,GAAGR,OAChCgB,EAAIf,UAAY,EAAKN,MAAMgB,KAAKH,GAAGP,UACnCe,EAAId,OAAS,EAAKP,MAAMgB,KAAKH,GAAGN,OAChCc,EAAIb,gBAAkB,EAAKR,MAAMiB,YAAYH,GAAGN,gBAChDa,EAAIZ,WAAa,EAAKT,MAAMiB,YAAYH,GAAGL,WAC3CG,EAAUU,KAAKD,GAMvBF,QAAQC,IAAI,cAAcR,GAC1B,EAAKW,SAAS,CAACC,WAAWZ,KAzCd,EA2Cda,eAAiB,WACf,IAAIC,EAAK,eACTC,IAAMC,IAAI,qDACLC,MAAK,SAAUC,GACdX,QAAQC,IAAIU,GACZ,IAAIC,EAAQD,EAASd,KAAKgB,mBAE1BN,EAAKH,SAAS,CAAEN,YAAac,EAAMjC,QAAO,SAAAuB,GAAG,MAAsB,eAAlBA,EAAIY,eACnD,WACAP,EAAKd,kBAIZsB,OAAM,SAAUC,GACbhB,QAAQC,IAAI,cAAce,MAE7BC,SAAQ,gBA3DG,EAgEdC,eAAgB,WAKdC,MAAM,0CACDT,MAAK,SAAAC,GAAQ,OAAIA,EAASS,UAC5BV,MAAK,SAAAb,GACJ,EAAKO,SAAS,CAAEP,KAAMA,EAAKwB,YACzB,WACA,EAAKf,uBAGRS,OAAM,SAAUC,GACXhB,QAAQC,IAAI,sBAAwBe,OA5E5C,EAAKnC,MAAQ,CACXgB,KAAM,GACNC,YAAa,GACbO,WAAY,IALF,E,gEAUZ3D,KAAKwE,mB,+BAqFL,OACE,yBAAK5F,UAAU,OACb,kBAACF,EAAD,MAEA,6BACA,yBAAKkG,GAAG,QAAQhG,UAAU,gBAExB,kBAACiG,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAa3E,KAAM,YACjBC,SACuB4C,IAArBlD,KAAKmC,MAAMgB,KAAK,GAChBnD,KAAKmC,MAAMgB,KAAK,GAAGZ,UAAW,MAIpC,kBAACsC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAAC,EAAD,CAAa3E,KAAM,SACfC,SACuB4C,IAArBlD,KAAKmC,MAAMgB,KAAK,GAChBnD,KAAKmC,MAAMgB,KAAK,GAAGX,OAAQ,MAIjC,kBAACqC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAAC,EAAD,CAAa3E,KAAM,YACfC,SACuB4C,IAArBlD,KAAKmC,MAAMgB,KAAK,GAChBnD,KAAKmC,MAAMgB,KAAK,GAAGV,UAAW,MAIpC,kBAACoC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAAC,EAAD,CAAa3E,KAAM,SACfC,SACuB4C,IAArBlD,KAAKmC,MAAMgB,KAAK,GAChBnD,KAAKmC,MAAMgB,KAAK,GAAGT,OAAQ,QAMrC,yBAAKuC,MAAO,CAAE/F,QAAS,SACrB,kBAAC,EAAD,CAAWoB,IAAKN,KAAKmC,MAAMwB,mB,GA5InBpD,aCRE2E,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAM2B,c","file":"static/js/main.4e1c8cf0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AppHeader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {\r\n            \r\n          }\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Covid-19 DashBoard\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { makeStyles ,withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n\r\n    root: {\r\n            padding:\"10px\",\r\n            width: \"200px\",\r\n            height: \"222px\"\r\n    },  \r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 25,\r\n    fontWeight:\"bold\",\r\n  },\r\n    pos: {\r\n        marginLeft: 12,\r\n        marginRight: 12,\r\n        marginTop:12,\r\n        marginBottom: 12,\r\n  },\r\n});\r\nclass MetricsCard extends Component {\r\n  render() {\r\n    const {classes} = this.props\r\n    return (\r\n      <Card   className={classes.root}>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {this.props.text}\r\n          </Typography>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {this.props.val}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(useStyles) (MetricsCard)","import React, {Component} from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\nclass DataTableComponent extends Component {\r\n    \r\n     componentDidMount() {\r\n        \r\n   }\r\n   componentDidUpdate() {\r\n    \r\n   }\r\n    \r\n    // lifecycle function\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <StyledTableCell align=\"center\">States/UT </StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Confirmed</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Active</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Recovered</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Deceased</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Test Per Million</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">Total ICU Beds</StyledTableCell>        \r\n                  </TableRow>\r\n                </TableHead>\r\n                      <TableBody>\r\n                        {this.props.val\r\n                            .filter(row => row.state !== 'State Unassigned'\r\n                                && row.state !=='Total')\r\n                            .map((row) => (\r\n                      <StyledTableRow key={\r\n                          row.state\r\n                      } >\r\n                      <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                              {row.state}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{row.confirmed}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{row.active}</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">{row.recovered}</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">{row.deaths}</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">{row.testspermillion}</StyledTableCell>\r\n                    <StyledTableCell align=\"center\">{row.numicubeds}</StyledTableCell>\r\n                    </StyledTableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          );\r\n    }\r\n\r\n}\r\nexport default withStyles(useStyles, { withTheme: true })(DataTableComponent);","import React,{Component} from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader';\nimport MetricsCard from './components/CaseMetrics';\nimport Grid from '@material-ui/core/Grid';\nimport DataTable from './components/MetricsTable';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      data: [],\n      testingData: [],\n      mergedData :[],\n  }\n  //this.patientDataApi=this.patientDataApi.bind(this)\n  }\n  componentDidMount() {\n    this.getPatientData()\n\n  }\n  mergeData = () => { \n    let mergeData = []\n    let i = 0;\n    let j = 0;\n    //console.log('len state data', this.state.data.length)\n    //console.log('len testing  data',this.state.testingData.length)\n    if (this.state.data !== undefined && this.state.testingData !== undefined) {\n      for (i = 0; i < this.state.data.length; i++) {\n        console.log('len state data', i)\n        for (j = 0; j < this.state.testingData.length; j++) {\n          console.log('testing state data', j)\n          if (this.state.data[i].state === this.state.testingData[j].state) {\n            let obj = {}\n            console.log('dada')\n            obj.state = this.state.data[i].state\n            obj.confirmed = this.state.data[i].confirmed\n            obj.active = this.state.data[i].active\n            obj.recovered = this.state.data[i].recovered\n            obj.deaths = this.state.data[i].deaths\n            obj.testspermillion = this.state.testingData[j].testspermillion\n            obj.numicubeds = this.state.testingData[j].numicubeds\n            mergeData.push(obj);\n          }\n        }\n      \n      }\n    } \n    console.log('merged data',mergeData)\n    this.setState({mergedData:mergeData})\n  }\n  getTestingData = () => { \n    let self=this;\n    axios.get('https://api.covid19india.org/state_test_data.json')\n        .then(function (response) {\n          console.log(response)\n          let tData = response.data.states_tested_data;\n          \n          self.setState({ testingData: tData.filter(obj => obj.updatedon === \"08/08/2020\") },\n            () => {\n            self.mergeData()\n          })\n          \n        })\n    .catch(function (error) {\n        console.log(\"from error \",error);\n    })\n    .finally(function () {\n\n    });\n  }\n\n  getPatientData =() =>  {\n    \n    /**\n     * added fetch for getting data from api\n    */\n    fetch('https://api.covid19india.org/data.json')\n        .then(response => response.json())\n      .then(data => {\n        this.setState({ data: data.statewise },\n          () => {\n          this.getTestingData()\n        })\n      })\n      .catch(function (error) {\n            console.log(\"error from main api\" , error);\n         })\n\n      //var self=this\n    // axios.get('https://api.covid19india.org/data.json')\n    //     .then(response => {\n    //       self.setState({ data: response.data.statewise }, () => {\n    //         self.getTestingData()\n    //       })\n    // })\n    // .catch(function (error) {\n    //     console.log(error);\n    // })\n    // .finally(function () {\n    // });    \n}\nrender() {\n    return (\n      <div className=\"App\">\n        <AppHeader />\n      \n        <br />\n        <div id=\"cases\" className=\"Card-Padding\">\n        \n          <Grid container >\n            <Grid item md={3}>\n              <MetricsCard text={\"Confirmed\"}\n                val={\n                  this.state.data[0]!==undefined ?\n                  this.state.data[0].confirmed :\"\"\n                } />\n            </Grid>\n          \n            <Grid item md={3}>\n            <MetricsCard text={\"Active\"}\n                val={\n                  this.state.data[0]!==undefined ?\n                  this.state.data[0].active :\"\"\n                } />\n            </Grid>\n          \n            <Grid item md={3}>\n            <MetricsCard text={\"Recovered\"}\n                val={\n                  this.state.data[0]!==undefined ?\n                  this.state.data[0].recovered :\"\"\n                } />\n            </Grid>\n          \n            <Grid item md={3}>\n            <MetricsCard text={\"Deaths\"}\n                val={\n                  this.state.data[0]!==undefined ?\n                  this.state.data[0].deaths :\"\"\n                } />\n            </Grid>\n\n          </Grid>\n        </div>\n        <div style={{ padding: '15px' }}>\n          <DataTable val={this.state.mergedData}/>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}